| Concept                                | Description                                              |
| -------------------------------------- | -------------------------------------------------------- |
| **Name**                               | What's the name and category?                            |
| **Problem Solved**                     | What type of problems can it solve?                      |
| **Technique**                          | Is it brute force, greedy, divide & conquer, etc.?       |
| **Time Complexity**                    | Best, average, worst-case analysis                       |
| **Space Complexity**                   | How much memory does it use?                             |
| **Base Case**                          | What’s the input where it stops or returns immediately?  |
| **Recursive Formula / Iterative Step** | How does it break down big problems into smaller ones?   |
| **Visualization**                      | Diagram or dry-run example                               |
| **Pseudocode**                         | High-level logic                                         |
| **JavaScript Code**                    | Full working code with comments                          |
| **Applications**                       | Where is it used in real life? (e.g., Dijkstra’s in GPS) |
| **Variations**                         | Any optimizations or edge cases?                         |




devise a plan for solving problem

problem
----------
->understand the problem 
->explore concreate examples
->break it down
->simplify 
->look back and refactor


1)understand the problem 
    ->can i restate the problem in my own words?
        (like language tamil or something that has better understanding)
    ->what are the inputs that go into the problem?
        addtion of two numbers so input is float ,int or number like that we need to check 
    ->what are the outputs that should come from the solution to the problem ?
        same what type of input we need to get (int ,float etc )
    -> can the outputs be determined from the inputs?
        if some one didnt give 2 inputs only gave one then the edge cases do we return undefined or again ask them etc 
    -> how should  i label the important pieces of data that are a part of the problem?
        how to name the function and integers etc ,in this way we need to understand 


//Example question write a function that takes string and count the each string  of character (a:4,b:5) like that 
2)Explore concreate examples
    ->start with simple examples 
        here we need to see if we are returnin gthe obj then it should include all alphabet or just the alphabet in the string 
    ->progress to more complex examples
        if the string entered contains phone number or we need to segragate lower case character or upper case letter like ({H:2,h:1})
    ->explore examples with empty inputs 
        if the input is empty then what to do 
    ->explore examples with invalid inputs 
        what if the input passed is object or number or some other thing 

//same problem as 2 
3)Break it down 
    -> here we need to write an algorithmic pseudo code  or something like i will right down 
        functipn charcount(str){
            edge cases we need to consider 

            we need to loop through each character and return an object 

            while looping we need to check if the character is present in object ,if present then we need to add count ,if not 
            present then we need to add the char to the obj ,while doing this we can lowercase first itself or while in loop we can 
            lower case each character 

            while adding we need to check if the char is number or letter and key then add 

            while adding we need to check if the char is number or letter and not in object then addd the key to object and set one 

            if the char is space or any other  dont do anything 

        }


4)solve or simplify
    ->find the core difficulty in what you are trying to do 
    ->temporarily ignore that difficulty
    ->write a simplified solution 
    ->then incorporate that difficulty back in 
        functipn charcount(str){
            edge cases we need to consider 

            while doing this we can lowercase first itself or while in loop we can 
            lower case each character 
            const charLowercase=str.toLowerCase();
            const result={}


            we need to loop through each character and return an object 

            for(i=0;i<charLowercase.length;i++){
                const char=charLowercase[i];

                while looping we need to check if the character is present in object ,if present then we need to add count , 

                if(result[char]>0){
                    result[char]++
                }
                if not 
            present then we need to add the char to the obj
                else{
                    result[char]=1
                }

                return result
            }
            }


5)look back and refactor
    ->can you check the result?
    ->can you derive the result differently?
    ->can you understand it as a glance 
    ->can you use the result or method for some other problem ?
    ->can you improve the performance  of your solution?
    ->can you think of others way to refactor ?
    -> How have other people solved this problem?


    this is how we might have refactored the code 

function charCount(str) {
    var obj = {};
    for (var char of str) {
        if (isAlphaNumeric(char)) {
        char = char.toLowerCase();
        obj [char] = ++obj [char] || 1;
        }
    }
    return obj;
    }
function isAlphaNumeric(char) {
    var code = char.charCodeAt(0);
    if (!(code > 47 && code < 58) && // numeric (0-9)
    ! (code > 64 && code < 91) && // upper alpha (A-Z)
    ! (code > 96 && code < 123)) { // lower alpha (a-z)
        return false;
    }
    return true;
}



//Common patterns 